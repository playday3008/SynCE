dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.53)

AC_INIT(librapi2, @@YOU_DID_NOT_RUN_THE_BOOTSTRAP_SCRIPT@@)
AC_CONFIG_HEADERS(rapi_config.h)
AC_CONFIG_SRCDIR(src/rapi.h)

AC_CANONICAL_TARGET

AM_INIT_AUTOMAKE

CFLAGS="-Wsign-compare -Wno-long-long $CFLAGS"

case $target in

	powerpc-apple-*)
		dnl Prevent "Undefined Macro argument list" error.
		CFLAGS="-no-cpp-precomp $CFLAGS"
		;;

	*)
		;;

esac

dnl Checks for typedefs, structures, and compiler characteristics.
saved_CFLAGS="$CFLAGS"
CFLAGS=""
AC_C_CONST
CFLAGS="$saved_CFLAGS"

dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_CC
AC_PROG_LIBTOOL
AC_PROG_MAKE_SET
dnl AM_PATH_CHECK(,,AC_MSG_WARN([Check not available.]))

dnl Check for dmalloc first
AC_ARG_WITH(dmalloc,
		AC_HELP_STRING([--with-dmalloc=PREFIX],[use dmalloc (default is NO)]),
[case "${withval}" in
  yes) dmalloc=true ;;
  no)  dmalloc=false ;;
  *) dmalloc=true; dmalloc_prefix="-L${withval}" ;;
esac],[dmalloc=false])

if ${dmalloc}; then
	AC_CHECK_LIB(dmalloc,main,,[
			AC_MSG_ERROR([Can't find dmalloc library])
		],${dmalloc_prefix})
	AC_CHECK_HEADERS(dmalloc.h,,[
			AC_MSG_ERROR([Can't find dmalloc.h])
		])
fi

dnl Checks for libraries.
AC_LIB_RPATH

dnl Check for libsynce
PKG_CHECK_MODULES(LIBSYNCE, libsynce >= 0.15)


dnl
dnl whether odccm dbus support is required
dnl
AC_ARG_ENABLE(odccm-support,
              [  --enable-odccm-support  enable odccm support (requires D-Bus)],
              enable_odccm_support=$enableval, enable_odccm_support=yes)

if ! test "$enable_odccm_support" = "no"; then
  dnl Check for D-Bus
  PKG_CHECK_MODULES(DBUS, [dbus-1 >= 0.60, dbus-glib-1 >= 0.60],
                    dbus=yes, dbus=no)

  if test "$dbus" = "no"; then
    if test "$enable_odccm_support" = "auto"; then
      AC_MSG_NOTICE([D-Bus not found, building without odccm support])
      enable_odccm_support=no
    else
      AC_MSG_ERROR([odccm support requested but D-Bus could not be found])
    fi
  else
    AC_MSG_NOTICE([Building with odccm support])
    AC_DEFINE(ENABLE_ODCCM_SUPPORT, 1, [Define if building with odccm support])
    enable_odccm_support=yes
  fi
else
  AC_MSG_NOTICE([Building without odccm support])
fi

if test "$enable_odccm_support" = "yes"; then odccm=1; else odccm=0; fi
AC_DEFINE_UNQUOTED(ENABLE_ODCCM_SUPPORT, $odccm, [Define to 1 if you want odccm support.])

dnl
dnl whether hal dbus support is required
dnl
AC_ARG_ENABLE(hal-support,
              [  --enable-hal-support  enable hal support (requires D-Bus)],
              enable_hal_support=$enableval, enable_hal_support=yes)

if ! test "$enable_hal_support" = "no"; then
  dnl Check for DBus and Hal
  PKG_CHECK_MODULES(HAL, [hal, dbus-1 >= 0.60, dbus-glib-1 >= 0.60],
                    hal_found=yes, hal_found=no)

  if test "$hal_found" = "no"; then
    if test "$enable_hal_support" = "auto"; then
      AC_MSG_NOTICE([Hal not found, building without hal support])
      enable_hal_support=no
    else
      AC_MSG_ERROR([Hal support requested but hal could not be found])
    fi
  else
    AC_MSG_NOTICE([Building with hal support])
    AC_DEFINE(ENABLE_HAL_SUPPORT, 1, [Define if building with hal support])
    enable_hal_support=yes
  fi
else
  AC_MSG_NOTICE([Building without hal support])
fi

if test "$enable_hal_support" = "yes"; then hal=1; else hal=0; fi
AC_DEFINE_UNQUOTED(ENABLE_HAL_SUPPORT, $hal, [Define to 1 if you want hal support.])


dnl Checks for header files.


dnl #
dnl # Now we must check for Python/Pyrex
dnl #
dnl # (need python, python headers, and pyrex)

AC_ARG_ENABLE(python-bindings, AS_HELP_STRING([--disable-python-bindings], [do not build python bindings]),[enable_python=$enableval], [enable_python=auto])

if test x$enable_python = xno; then
    have_python=no
else
    AC_MSG_NOTICE([Checking to see if we can build Python bindings])
    have_python=no
    if test x$enable_python != xyes -a x$enable_python != xauto; then
        minimum_version=$enable_python
	enable_python=yes
    else
        minimum_version=2.3
    fi
	AM_PATH_PYTHON($minimum_version, [have_python_path=yes], [have_python_path=no] )
	AC_CHECK_PROGS(PYREX, pyrexc)
	AM_CHECK_PYTHON_HEADERS([have_python_header=yes], [have_python_header=no])
	
	if test x$have_python_path = xno -o x$have_python_header = xno -o x$PYREX != xpyrexc ; then
            if test x$enable_python = xyes ; then
                AC_MSG_ERROR([Building python bindings requested, but can't build them])
            else
                AC_MSG_NOTICE([Not building Python bindings])
            fi
	else
	    if test -z "$PYTHON" ; then
	        AC_MSG_WARN([Python not found])
	    else
		have_python=yes
	    fi
	
	    if test x$have_python = xno ; then
	        if test x$enable_python = xyes ; then
	            AC_MSG_ERROR([Building python explicitly requested, but can't build python bindings])
		else
		    AC_MSG_NOTICE([Not building Python bindings])
	        fi
	    else

dnl # require at least pyrex 0.9.6

		AC_MSG_CHECKING([pyrex version])

		pyrex_ver=`$PYREX --version 2>&1 | sed -e 's/Pyrex version //'`
	 	`echo "$pyrex_ver" | awk 'BEGIN { FS = "."; } { printf "export pyrex_maj_ver=%s export pyrex_min_ver=%s export pyrex_sub_ver=%s", $1, $2, $3;}'`

		if test "$pyrex_min_ver" -lt 9 || test "$pyrex_sub_ver" -lt 6 ; then
		    AC_MSG_RESULT([$pyrex_ver])
		    if test x$enable_python = xyes ; then
			AC_MSG_ERROR([Building python explicitly requested, but can't build python bindings, need at least pyrex 0.9.6])
		    else
			AC_MSG_NOTICE([Not building Python bindings, need at least pyrex 0.9.6])
			have_python=no
	            fi
    		else
		    AC_MSG_RESULT([ok])
    		fi

	    fi
	fi
fi
AM_CONDITIONAL(HAVE_PYTHON, test x$have_python = xyes)

# checks for pthreads

saved_CFLAGS="$CFLAGS"
[CFLAGS=`echo $CFLAGS | sed 's|-Werror[^[:space:]]*||'`]

ACX_PTHREAD([enable_threads="pthread"],[enable_threads="no"])
CFLAGS="$saved_CFLAGS"
if test $enable_threads != "pthread"; then
	AC_MSG_ERROR([unable to find pthreads, currently this is required])
else
	AC_DEFINE(HAVE_PTHREAD,1,[Define if you have POSIX threads libraries and header files.])
	LIBS="$PTHREAD_LIBS $LIBS"
	CFLAGS="$PTHREAD_CFLAGS $CFLAGS"
	CXXFLAGS="$PTHREAD_CFLAGS $CXXFLAGS"
fi


AC_CONFIG_FILES(
	[script/synce-install-cab],
	[chmod +x script/synce-install-cab]
)

AC_CONFIG_FILES(
	[script/synce-remove-program],
	[chmod +x script/synce-remove-program]
)

AC_OUTPUT([librapi2.pc
           Makefile
           src/Makefile
           src/support/Makefile
           src/config/Makefile
           src/backend_ops_1/Makefile
           src/backend_ops_2/Makefile
           man/Makefile
           script/Makefile
           tests/Makefile
           tests/CeRapiInvoke/Makefile
           tests/CeRapiInvoke/dll/Makefile
           tests/rapi/Makefile
           tools/Makefile
           tools/man/Makefile
           python/Makefile
           python/tests/Makefile])

