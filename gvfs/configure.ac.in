dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.53)

AC_INIT(synce-gvfs, @@VERSION@@)
AC_CONFIG_HEADERS(config.h)
AC_CONFIG_SRCDIR(daemon/gvfsbackendsynce.c)
AM_INIT_AUTOMAKE
	
AM_SANITY_CHECK

AC_C_CONST
AC_ISC_POSIX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AM_DISABLE_STATIC
AM_PROG_LIBTOOL
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
AM_PROG_CC_C_O

PKG_CHECK_MODULES(GLIB, glib-2.0 >= 2.18 gthread-2.0 gobject-2.0 gmodule-no-export-2.0 gio-unix-2.0 gio-2.0)
AC_SUBST(GLIB_CFLAGS)
AC_SUBST(GLIB_LIBS)

PKG_CHECK_MODULES(DBUS, dbus-1, dbus_found=yes, dbus_found=no)
AC_SUBST(DBUS_CFLAGS)
AC_SUBST(DBUS_LIBS)

AC_CHECK_LIB(gvfscommon, g_mount_info_ref, ,AC_MSG_ERROR([Required library libgvfscommon not found]))

dnl Check if GLib version is high enough for GDBus
PKG_CHECK_EXISTS([gio-2.0 >= 2.26], have_gdbus=yes, have_gdbus=no)

dnl Should we build with GDBus ?                                                
AC_MSG_CHECKING([whether to use GDBus])
if test "$have_gdbus" = "yes"; then
   use_gdbus=1;
   AC_MSG_RESULT([yes])
else
   use_gdbus=0;
   AC_MSG_RESULT([no])
fi
AC_DEFINE_UNQUOTED(USE_GDBUS, $use_gdbus, [Define to 1 if you want to use GDBus\
 support.])
AM_CONDITIONAL(USE_GDBUS, test "x$use_gdbus" = "x1")


dnl **** gio module path handling ****
giomodulesdir=`pkg-config --variable=giomoduledir gio-2.0`
AC_SUBST(giomodulesdir)

dnl **************************
dnl *** Check for libsynce ***
dnl **************************

dnl Check for libsynce
PKG_CHECK_MODULES(LIBSYNCE, libsynce >= 0.16)


AC_ARG_WITH(gvfs-source, [  --with-gvfs-source=PATH     Location of the GVFS source tree.],
            with_gvfs_source="$withval", with_gvfs_source="no")
AM_CONDITIONAL(LOCAL_LIBDAEMON_SRC, test "x$with_gvfs_source" = "xno")
if test "x$with_gvfs_source" = "xno"; then
    AC_MSG_NOTICE([Assuming an internal gvfs source tree])
    with_gvfs_source='$(top_srcdir)/gvfs'
else
    echo "${with_gvfs_source}"|grep '^/' > /dev/null 2>&1
    if test $? -ne 0; then
       with_gvfs_source='$(top_srcdir)/'"${with_gvfs_source}"
    fi
    AC_MSG_NOTICE([Using gvfs source tree at ${with_gvfs_source}])
fi
AC_SUBST(with_gvfs_source)


dnl *** awkward check for gvfs version

AC_ARG_WITH(gvfs-source-version, [  --with-gvfs-source-version=VERSION     Version of the GVFS source tree (default 1.16).],
            with_gvfs_source_version="$withval", with_gvfs_source_version="1.16")
AC_MSG_CHECKING([gvfs major version])
#gvfs_major_ver=`echo "$with_gvfs_source_version"| sed -e 's/^.* \(   [0-9]\{1,\}\)   \.   [0-9]\{1,\}.*$/\1/'`
gvfs_major_ver=`echo "$with_gvfs_source_version" | sed -e 's/^.*\(@<:@0-9@:>@\{1,\}\)\.@<:@0-9@:>@\{1,\}.*$/\1/'`
AC_MSG_RESULT([$gvfs_major_ver])

AC_MSG_CHECKING([gvfs minor version])
#gvfs_minor_ver=`echo "$with_gvfs_source_version" | sed -e 's/^.*[0-9]\{1,\}\.\([0-9]\{1,\}\).*$/\1/'`
gvfs_minor_ver=`echo "$with_gvfs_source_version" | sed -e 's/^.*@<:@0-9@:>@\{1,\}\.\(@<:@0-9@:>@\{1,\}\).*$/\1/'`
AC_MSG_RESULT([$gvfs_minor_ver])

if test "$gvfs_major_ver" -eq 1 -a "$gvfs_minor_ver" -lt 4; then
AC_DEFINE(GVFS_PRE_1_4, 1, [Define if building against gvfs pre version 1.4])
fi

if test "$gvfs_major_ver" -eq 1 -a "$gvfs_minor_ver" -gt 12; then
AC_DEFINE(GVFS_POST_1_12, 1, [Define if building against gvfs post version 1.12])
fi

AM_CONDITIONAL(GVFS_VERSION_1_0, test "$gvfs_major_ver" -ge 1 )
AM_CONDITIONAL(GVFS_VERSION_1_2, test "$gvfs_major_ver" -ge 1 -a "$gvfs_minor_ver" -ge 2 )
AM_CONDITIONAL(GVFS_VERSION_1_4, test "$gvfs_major_ver" -ge 1 -a "$gvfs_minor_ver" -ge 4 )
AM_CONDITIONAL(GVFS_VERSION_1_14, test "$gvfs_major_ver" -ge 1 -a "$gvfs_minor_ver" -ge 14 )
AM_CONDITIONAL(GVFS_VERSION_1_16, test "$gvfs_major_ver" -ge 1 -a "$gvfs_minor_ver" -ge 16 )

AC_ARG_ENABLE(update-mime-database,
        AC_HELP_STRING([--disable-update-mime-database],
       [do not run the update-mime-database utility (mostly useful for package maintainers) ]))
AM_CONDITIONAL(UPDATE_MIME_DATABASE, test "$enable_update_mime_database" != "no")

dnl ****************************
dnl *** Checks for intltool  ***
dnl ****************************

IT_PROG_INTLTOOL([0.35.0])
GETTEXT_PACKAGE=gvfs

AC_SUBST([GETTEXT_PACKAGE])
AC_DEFINE_UNQUOTED([GETTEXT_PACKAGE],["$GETTEXT_PACKAGE"],[The gettext domain name])
AM_GLIB_GNU_GETTEXT

dnl ****************************
dnl *** Checks for gettext   ***
dnl ****************************

dnl *** disabled by now, using intltool ***
dnl *** we'll revert when glib-gettexttize will be able
dnl *** to manage [enconding: UTF-8] in POTIFILES.in

dnl GETTEXT_PACKAGE=gvfs
dnl AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [The gettext domain name])
dnl AC_SUBST(GETTEXT_PACKAGE)

dnl ALL_LINGUAS=""

dnl AM_GLIB_GNU_GETTEXT

dnl LIBS="$LIBS $INTLLIBS"

dnl AM_GLIB_DEFINE_LOCALEDIR(GVFS_LOCALEDIR)

AC_OUTPUT([
	Makefile
	daemon/Makefile
	pixmaps/Makefile
	pixmaps/22x22/Makefile
	pixmaps/48x48/Makefile
	po/Makefile.in
	data/Makefile
	gvfs/Makefile
	gvfs/common/Makefile
	gvfs/daemon/Makefile
])
