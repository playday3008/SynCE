#!/usr/bin/env python

import sys
import os
import platform
import dbus

sys.path.insert(0,"@DATADIR@/@PACKAGE_NAME@")
import synceconnector
from synceconnector import run_dccm, process_config, get_logger, serial_stop_device, serial_start_device, serial_get_address, serial_get_devnum

DBUS_DBUS_BUSNAME       = "org.freedesktop.DBus"
DBUS_DBUS_IFACE         = "org.freedesktop.DBus"
DBUS_DBUS_OBJPATH       = "/org/freedesktop/DBus"

DBUS_HAL_BUSNAME         = "org.freedesktop.Hal"
DBUS_HAL_MANAGER_IFACE   = "org.freedesktop.Hal.Manager"
DBUS_HAL_MANAGER_OBJPATH = "/org/freedesktop/Hal/Manager"
DBUS_HAL_DEVICE_IFACE    = "org.freedesktop.Hal.Device"

#
# main()
#
if __name__ == '__main__':

    logger = get_logger("hal-synce-serial")

    device_path = False

    if os.environ.has_key("HALD_ACTION"):
        action = os.environ["HALD_ACTION"]
        if action == "addon":
            action = "add"

        if os.environ.has_key("HAL_PROP_INFO_UDI"):
            device_path = os.environ["HAL_PROP_INFO_UDI"]
        else:
            logger.critical("Hal environment not set: HAL_PROP_INFO_UDI missing")
            sys.exit(1)

        # deal with 2 port devices
        # we want to ignore the first port

        our_udi = os.environ["HAL_PROP_INFO_UDI"]

        try:
            device_haldev = dbus.Interface(dbus.SystemBus().get_object(DBUS_HAL_BUSNAME, our_udi), DBUS_HAL_DEVICE_IFACE)
        except:
            logger.critical("failed to connect to hal object %s: %s" % (our_udi, e))
            sys.exit(1)

        parent_udi = device_haldev.GetPropertyString("info.parent")

        try:
            hal_manager = dbus.Interface(dbus.SystemBus().get_object(DBUS_HAL_BUSNAME, DBUS_HAL_MANAGER_OBJPATH), DBUS_HAL_MANAGER_IFACE)
        except:
            logger.critical("failed to connect to hal device manager: %s" % e)
            sys.exit(1)

        udilist = hal_manager.GetAllDevices()

        device_udilist = []

        for udi in udilist:
            if parent_udi in udi and parent_udi != udi:
                device_udilist.append(udi)

        if len(device_udilist) > 1:
            device_udilist.sort()
            if our_udi != device_udilist[len(device_udilist) - 1]:
                device_haldev.SetPropertyBoolean("pda.pocketpc.disabled", True)
                sys.exit(0)

        # get serial device file
        if platform.system() == "FreeBSD":
            try:
                device_file = "/dev/ttyU"+os.environ["HAL_PROP_FREEBSD_UNIT"]
            except Exception,e:
                logger.critical("Hal environment not set: %s" % e)
                sys.exit(1)
        else:
            try:
                device_file = os.environ["HAL_PROP_SERIAL_DEVICE"]
            except Exception,e:
                logger.critical("Hal environment not set: %s" % e)
                sys.exit(1)

    else:
        logger.critical("Environment not set, action is missing")
        sys.exit(1)

    process_config()

    devnum = serial_get_devnum(device_file)
    if devnum < 0:
        sys.exit(1)

    # see the "linkname" option in the man page for pppd
    linkname = "synce-device"+devnum

    if action == "add":
        logger.debug("running as addon for device "+device_file)

        local_ip, remote_ip = serial_get_address(devnum)

        if serial_start_device(device_file, local_ip, remote_ip, linkname) == False:
            logger.critical("failed to establish serial connection, aborting...")
            sys.exit(1)

        logger.debug("successfully configured interface")

        run_dccm(device_path, remote_ip, local_ip, False)

        logger.error("aborting ...")
        sys.exit(1)


    if action == "remove":
        logger.debug("running for removal of device "+device_file)
        if serial_stop_device(linkname) == False:
            logger.critical("failed to take down serial connection, aborting...")
            sys.exit(1)

