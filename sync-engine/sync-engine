#!/usr/bin/env python
# -*- coding: utf-8 -*-
############################################################################
#    Copyright (C) 2006  Ole André Vadla Ravnås <oleavr@gmail.com>       #
#                                                                          #
#    This program is free software; you can redistribute it and#or modify  #
#    it under the terms of the GNU General Public License as published by  #
#    the Free Software Foundation; either version 2 of the License, or     #
#    (at your option) any later version.                                   #
#                                                                          #
#    This program is distributed in the hope that it will be useful,       #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#    GNU General Public License for more details.                          #
#                                                                          #
#    You should have received a copy of the GNU General Public License     #
#    along with this program; if not, write to the                         #
#    Free Software Foundation, Inc.,                                       #
#    59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
############################################################################

"""
Provider of D-Bus services aiming to replace librra.
"""

version = (0, 1, 0)

import gobject

import dbus
import dbus.glib

import os
import signal
import sys
import threading
import logging

from engine.syncengine import SyncEngine

logger = None
mainloop = None

def term_handler(signum, frame):
    logger.info("Received termination signal. Exiting")
    gobject.idle_add(mainloop.quit)
    engine.notify_quit()

if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG,
                        stream=sys.stdout,
                        format='%(asctime)s %(levelname)s %(name)s : %(message)s')

    logger = logging.getLogger("syncengine")

    logger.debug("creating SyncEngine object")
    engine = SyncEngine()

    logger.debug("installing signal handlers")
    signal.signal(signal.SIGTERM, term_handler)
    signal.signal(signal.SIGINT, term_handler)

    logger.debug("running main loop")
    gobject.threads_init()
    mainloop = gobject.MainLoop()
    try:
        mainloop.run()
    except KeyboardInterrupt:
        pass

    logger.debug("waiting for engine to clean up")
    engine.wait_quit()
