dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.59)
AC_INIT([liborange], [YOU_DID_NOT_RUN_THE_BOOTSTRAP_SCRIPT], twogood@users.sourceforge.net)
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE

AM_CONFIG_HEADER(config.h)

CFLAGS="-Wall -Wsign-compare -Wno-long-long $CFLAGS"

case $target in

	powerpc-apple-*)
		dnl Prevent "Undefined Macro argument list" error.
		CFLAGS="-no-cpp-precomp $CFLAGS"
		;;

esac

dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_LIBTOOL
AC_PROG_MAKE_SET
dnl AM_PATH_CHECK()

dnl Checks for libraries.
AC_LIB_RPATH

dnl Check for libsynce
PKG_CHECK_MODULES(LIBSYNCE, libsynce >= 0.9.1)

dnl Check for libdynamite
PKG_CHECK_MODULES(LIBDYNAMITE, libdynamite >= 0.1)

dnl Check for libunshield
PKG_CHECK_MODULES(LIBUNSHIELD, libunshield >= 0.5)

dnl Checks for typedefs, structures, and compiler characteristics.
SAVED_CFLAGS="$CFLAGS"
CFLAGS=""
AC_C_CONST
CFLAGS="$SAVED_CFLAGS"

dnl Conditional compile of Inno Setup support (because it's not very good)
my_enable_inno=0
AC_ARG_ENABLE(inno,
  AC_HELP_STRING(
    [--enable-inno],
    [Enables expermential Inno Setup support]),
    [my_enable_inno=1],
    [my_enable_inno=0]
  )
AC_DEFINE_UNQUOTED(ENABLE_INNO, $my_enable_inno, [Set to 1 when Inno Setup support is enabled])
if test $my_enable_inno -eq 1; then
  INNO_LIBADD='inno.lo'
fi
AC_SUBST([INNO_LIBADD])

dnl Conditional compile of VISE support (because it's not very good)
my_enable_vise=0
AC_ARG_ENABLE(vise,
  AC_HELP_STRING(
    [--enable-vise],
    [Enables expermential VISE support]),
    [my_enable_vise=1],
    [my_enable_vise=0]
  )
AC_DEFINE_UNQUOTED(ENABLE_VISE, $my_enable_vise, [Set to 1 when VISE support is enabled])
if test $my_enable_vise -eq 1; then
  VISE_LIBADD='vise.lo'
fi
AC_SUBST([VISE_LIBADD])

dnl Conditional use of libole2 (because it's GPL licensed)
my_with_libole2=0
AC_ARG_WITH(libole2,
  AC_HELP_STRING(
    [--with-libole2],
    [Use GPL-contaminated libole2 for MSI decoding]),
    [my_with_libole2=1],
    [my_with_libole2=0]
  )
if test $my_with_libole2 -eq 1; then
  AM_PATH_LIBOLE2([0.2.4],
    [AC_DEFINE_UNQUOTED(WITH_LIBOLE2, $my_with_libole2, [Set to 1 when libole2 support is included])],
    [AC_MSG_ERROR([Can't find libole2])]
    )
fi

dnl Conditional use of libgsf (because it's LGPL licensed)
my_with_libgsf=0
AC_ARG_WITH(libgsf,
  AC_HELP_STRING(
    [--with-libgsf],
    [Use LGPL-contaminated libgsf for MSI decoding]),
    [my_with_libgsf=1],
    [my_with_libgsf=0]
  )
if test $my_with_libgsf -eq 1; then
  PKG_CHECK_MODULES([LIBGSF], [libgsf-1],,
                    [AC_MSG_ERROR([Can't find libgsf-1])]
                    )
fi
AC_DEFINE_UNQUOTED(WITH_LIBGSF, $my_with_libgsf, [Set to 1 when compiled with libgsf])

dnl Conditional compile of MSI support (because it requires libole2)
my_enable_msi=0
AC_ARG_ENABLE(msi,
  AC_HELP_STRING(
    [--enable-msi],
    [Enables expermential MSI support]),
    [my_enable_msi=1],
    [my_enable_msi=0]
  )
AC_DEFINE_UNQUOTED(ENABLE_MSI, $my_enable_msi, [Set to 1 when msi support is enabled])
if test $my_enable_msi -eq 1; then
  if test $my_with_libgsf -eq 1; then
    MSI_LIBADD='msi-gsf.lo'
  else 
    if test $my_with_libole2 -eq 1 ; then
      MSI_LIBADD='msi.lo'
    else
      AC_MSG_ERROR([Not configured with libgsf or libole2 but that's needed for MSI support.])
    fi
  fi
fi
AC_SUBST([MSI_LIBADD])

dnl Look for libmagic
AC_CHECK_LIB(magic,magic_open)
AC_CHECK_HEADERS(magic.h)


# http://www.gnu.org/manual/autoconf-2.53/html_node/AC_LIBOBJ-vs.-LIBOBJS.html
# This is necessary so that .o files in LIBOBJS are also built via
# the ANSI2KNR-filtering rules.
LIB@&t@OBJS=`echo "$LIB@&t@OBJS" | sed 's,\.[[^.]]* ,$U&,g;s,\.[[^.]]*$,$U&,'`
LTLIBOBJS=`echo "$LIB@&t@OBJS" | sed 's,\.[[^.]]* ,.lo ,g;s,\.[[^.]]*$,.lo,'`
AC_SUBST(LTLIBOBJS)

AC_CHECK_LIB(z,inflate,,[
    AC_MSG_ERROR(["Could not find zlib, please install it!"])
    ])

AC_OUTPUT([liborange.pc
           Makefile
           lib/Makefile
           src/Makefile])
