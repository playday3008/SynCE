$Id$ vim: expandtab

General notes
=============

A.      All daemons and progams are meant to run as user-land processes unless
        noted otherwise.

B.      All libraries should be written i ANSI C.

C.      Responsiblity is denoted in square brackets.


1.      Foundation
==================

1.1.    DCCM                                                [twogood]

        The purpose of this application is to listen on port 5679 and
        maintain a list of currently connected Pocket PC devices.

        The application should support tcpwrappers.

1.2.    The RAPI library (librapi2)                         [twogood]

        This library implements the RAPI interface.

1.3.    The SynCE library (libsynce)                        [twogood]

        This library contains common functionality for the daemon and
        RAPI library. Client applications may need to use it to convert
        data types, etc.

1.4.    CeTTY                                                [llange]

        See the mailing list for info about this tool.

1.5.    NEW: Connection notification interface

        This will allow an application to run or get a callback when a device
        connects to the daemon currently known as asyncd.
        
        Details about this in connection_notification.txt

1.6.    Packaging

1.6.1.  RedHat 8.0 packages                                 [twogood]

1.6.2   Making .deb packages

       

2.      Foundation applications
===============================

        These tools use librapi to access the Pocket PC device.

2.1.    Maybe some library for common user interface functionality

2.2.    Command line tools

2.2.1.  Tool(s) to copy files to and from a Pocket PC device.

2.3.    KDE 3 integration

2.3.1.  KDE I/O slave (updated version of kio_synce)

        Allows browsing and manipulation of the Pocket PC device file
        system with Konqueror.

2.3.2.  KDE system tray icon that shows connected devices

2.4.    GNOME 2 integration

        Whatever corresponds to the KDE 3 applications listed in 2.2.
        (Please tell me what these are called!)

2.4.1   GNOME-VFS module

        See Tamas Decsi's mail to synce-devel and this link:

        http://developer.gnome.org/doc/API/gnome-vfs/writing-modules.html

2.x.    Tools for your favorite desktop environment here.


3.      Synchronization foundation
==================================

        This is new stuff. I have some code for this hidden away for
        future use! :-)

        (Credits to Max Muermann on this too!)

3.1     Synchronization daemon

        The purpose of this daemon is to listen on port 5678 and
        perform synchronization.

        This port is registered with IANA as "Remote Replication Agent
        Connection". Name suggestions: "rracd".
        
        The daemon should support tcpwrappers.

3.2     Synchronization framework (this is what MS calls ActiveSync)

3.3     Synchronization modules (also known as conduits)

3.3.1.  Calendar (appointments)

        This should essentially be able to convert between calendar
        database entries on the Pocket PC and iCal/vCal.

        Some work on this has been done in the "synical" CVS module.

3.3.2.  Contacts

        This should essentially be able to convert between contact
        database entries on the Pocket PC and VCard.

3.3.x.  Whatever else that may be synchronized.


4.      Synchronization applications
====================================

4.1     Command line tools

4.2     KDE 3 integration

        This is about KMail, KAddressbook, KOrganizer, etc.

        See http://pim.kde.org/ for more info.

4.3.    GNOME 1/2 integration.

4.3.1   Evolution is still only a GNOME 1 application, but would
        probably be the most wanted integration. However, it only supports
        synchronization with Palm devices, and that seems to be quite
        different.

        Have a look at this: http://multisync.sourceforge.net/ 

4.4.    SyncML support

        http://www.syncml.org/

4.x.    Your favorite personal information mangagement applications
        here.


5.      Add-ons
===============

5.1.    Connection tools

5.1.1.  Visual connection tool

        Help with selecting and configuring a connection. It should probably
        be divided into two parts: a library and a default user interface.
        Other user interfaces may then be added quite easily.

        This is important to attract users and limit support requests.

        This app will need root access.

5.1.1.  Serial connection

        See the module "serial" in the SynCE CVS repository.

5.1.2.  USB connection

        See the module "wince-usb" in the SynCE CVS repository.

5.1.3.  Bluetooth connection

5.2     PyRAPI

        Richard Taylor's Python wrappers for librapi2.

        
 
I will personally try to work as much as possible on the foundation
(1.1, 1.2, 1.3, 1.5) and synchronization foundation (3.1).

Others will have to take care of the other parts!

The foundation applications section (2) is quite easy if you know the
environment you are making your application for, just follow Microsoft's
documentation but link with librapi and libsynce! :-)

http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wcesdkr/htm/_wcesdk_cerapiinit.asp

Synchronization is also (somewhat) documented by Microsoft, but I will
later present how this will work with SynCE as we won't use COM. Here
are the Microsoft docs anyway:

http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnce21/html/activesync.asp


