diff -Nur libsynce-0.10.0.svn20071127.orig/ChangeLog libsynce-0.10.0.svn20071127/ChangeLog
--- libsynce-0.10.0.svn20071127.orig/ChangeLog	2007-09-18 22:23:32.000000000 +0100
+++ libsynce-0.10.0.svn20071127/ChangeLog	2008-01-02 15:19:15.000000000 +0000
@@ -1,3 +1,8 @@
+2008-01-01  Mark Ellis  <mark@mpellis.org.uk>
+
+	* added hal support to synce_info_new()
+	* make (v)dccm file support optional (default=yes)
+
 2007-09-06  Mark Ellis  <mark@mpellis.org.uk>
 
 	* modified synce_info_new()
diff -Nur libsynce-0.10.0.svn20071127.orig/configure.ac.in libsynce-0.10.0.svn20071127/configure.ac.in
--- libsynce-0.10.0.svn20071127.orig/configure.ac.in	2007-09-15 10:22:22.000000000 +0100
+++ libsynce-0.10.0.svn20071127/configure.ac.in	2008-01-02 15:19:15.000000000 +0000
@@ -25,6 +25,8 @@
 AC_PROG_LN_S
 AC_PROG_LIBTOOL
 AC_PROG_MAKE_SET
+PKG_PROG_PKG_CONFIG
+
 dnl AM_PATH_CHECK()
 
 dnl Check for dmalloc first
@@ -48,33 +50,76 @@
 dnl Checks for libraries.
 AC_LIB_RPATH
 
-AC_ARG_ENABLE(desktop-integration,
-              [  --enable-desktop-integration  enable desktop integration (requires D-Bus)],
-              enable_desktop_integration=$enableval, enable_desktop_integration=yes)
+AC_ARG_ENABLE(dccm-file-support,
+              [  --enable-dccm-file-support  enable dccm file support],
+              enable_dccm_file_support=$enableval, enable_dccm_file_support=yes)
+
+if ! test "$enable_dccm_file_support" = "no"; then
+  AC_MSG_NOTICE([Building with dccm file support])
+  AC_DEFINE(ENABLE_DCCM_FILE_SUPPORT, 1, [Define if building with dccm file support])
+  enable_dccm_file_support=yes
+else
+  AC_MSG_NOTICE([Building without dccm file support])
+fi
+
+if test "$enable_dccm_file_support" = "yes"; then dccm_file=1; else dccm_file=0; fi
+AC_DEFINE_UNQUOTED(ENABLE_DCCM_FILE_SUPPORT, $dccm_file, [Define to 1 if you want dccm file support.])
 
-if ! test "$enable_desktop_integration" = "no"; then
+AC_ARG_ENABLE(odccm-support,
+              [  --enable-odccm-support  enable odccm support (requires D-Bus)],
+              enable_odccm_support=$enableval, enable_odccm_support=yes)
+
+if ! test "$enable_odccm_support" = "no"; then
   dnl Check for D-Bus
   PKG_CHECK_MODULES(DBUS, [dbus-1 >= 0.60, dbus-glib-1 >= 0.60],
                     dbus=yes, dbus=no)
 
   if test "$dbus" = "no"; then
-    if test "$enable_desktop_integration" = "auto"; then
-      AC_MSG_NOTICE([D-Bus not found, building without desktop integration])
-      enable_desktop_integration=no
+    if test "$enable_odccm_support" = "auto"; then
+      AC_MSG_NOTICE([D-Bus not found, building without odccm support])
+      enable_odccm_support=no
+    else
+      AC_MSG_ERROR([odccm support requested but D-Bus could not be found])
+    fi
+  else
+    AC_MSG_NOTICE([Building with odccm support])
+    AC_DEFINE(ENABLE_ODCCM_SUPPORT, 1, [Define if building with odccm support])
+    enable_odccm_support=yes
+  fi
+else
+  AC_MSG_NOTICE([Building without odccm support])
+fi
+
+if test "$enable_odccm_support" = "yes"; then odccm=1; else odccm=0; fi
+AC_DEFINE_UNQUOTED(ENABLE_ODCCM_SUPPORT, $odccm, [Define to 1 if you want odccm support.])
+
+AC_ARG_ENABLE(hal-support,
+              [  --enable-hal-support  enable hal support (requires D-Bus)],
+              enable_hal_support=$enableval, enable_hal_support=yes)
+
+if ! test "$enable_hal_support" = "no"; then
+  dnl Check for DBus and Hal
+  PKG_CHECK_MODULES(HAL, [hal >= 0.5.10, dbus-1 >= 0.60, dbus-glib-1 >= 0.60],
+                    hal_found=yes, hal_found=no)
+
+  if test "$hal_found" = "no"; then
+    if test "$enable_hal_support" = "auto"; then
+      AC_MSG_NOTICE([Hal not found, building without hal support])
+      enable_hal_support=no
     else
-      AC_MSG_ERROR([desktop integration requested but D-Bus could not be found])
+      AC_MSG_ERROR([Hal support requested but hal could not be found])
     fi
   else
-    AC_MSG_NOTICE([Building with desktop integration])
-    AC_DEFINE(ENABLE_DESKTOP_INTEGRATION, 1, [Define if building with desktop integration])
-    enable_desktop_integration=yes
+    AC_MSG_NOTICE([Building with hal support])
+    AC_DEFINE(ENABLE_HAL_SUPPORT, 1, [Define if building with hal support])
+    enable_hal_support=yes
   fi
 else
-  AC_MSG_NOTICE([Building without desktop integration])
+  AC_MSG_NOTICE([Building without hal support])
 fi
 
-if test "$enable_desktop_integration" = "yes"; then desktop=1; else desktop=0; fi
-AC_DEFINE_UNQUOTED(ENABLE_DESKTOP_INTEGRATION, $desktop, [Define to 1 if you want desktop integration.])
+if test "$enable_hal_support" = "yes"; then hal=1; else hal=0; fi
+AC_DEFINE_UNQUOTED(ENABLE_HAL_SUPPORT, $hal, [Define to 1 if you want hal support.])
 
 dnl Checks for header files.
 
diff -Nur libsynce-0.10.0.svn20071127.orig/lib/info.c libsynce-0.10.0.svn20071127/lib/info.c
--- libsynce-0.10.0.svn20071127.orig/lib/info.c	2007-09-18 22:23:32.000000000 +0100
+++ libsynce-0.10.0.svn20071127/lib/info.c	2008-01-02 15:20:07.000000000 +0000
@@ -6,7 +6,7 @@
 #include "synce.h"
 #include "synce_log.h"
 #include "config/config.h"
-#if ENABLE_DESKTOP_INTEGRATION
+#if ENABLE_ODCCM_SUPPORT || ENABLE_HAL_SUPPORT
 #define DBUS_API_SUBJECT_TO_CHANGE 1
 #include <dbus/dbus.h>
 #include <dbus/dbus-glib.h>
@@ -18,8 +18,12 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
+#if ENABLE_HAL_SUPPORT
+#include <dbus/dbus-glib-lowlevel.h>
+#include <libhal.h>
+#endif
 
-#if ENABLE_DESKTOP_INTEGRATION
+#if ENABLE_ODCCM_SUPPORT
 static const char* const ODCCM_SERVICE      = "org.synce.odccm";
 static const char* const ODCCM_MGR_PATH     = "/org/synce/odccm/DeviceManager";
 static const char* const ODCCM_MGR_IFACE    = "org.synce.odccm.DeviceManager";
@@ -28,6 +32,7 @@
 
 #define FREE(x)     if(x) free(x)
 
+#if ENABLE_DCCM_FILE_SUPPORT
 static char *STRDUP(const char* str)
 {
   return str ? strdup(str) : NULL;
@@ -99,10 +104,12 @@
   }
 }
 
-#if ENABLE_DESKTOP_INTEGRATION
+#endif /* ENABLE_DCCM_FILE_SUPPORT */
+
+#if ENABLE_ODCCM_SUPPORT || ENABLE_HAL_SUPPORT
 
 gint
-get_socket_from_odccm(const gchar *unix_path)
+get_socket_from_dccm(const gchar *unix_path)
 {
   int fd = -1, dev_fd, ret;
   struct sockaddr_un sa;
@@ -151,6 +158,9 @@
 
   return dev_fd;
 }
+#endif
+
+#if ENABLE_ODCCM_SUPPORT
 
 #define ODCCM_TYPE_OBJECT_PATH_ARRAY \
   (dbus_g_type_get_collection("GPtrArray", DBUS_TYPE_G_OBJECT_PATH))
@@ -259,7 +269,7 @@
 
     g_object_unref(proxy);
 
-    result->fd = get_socket_from_odccm(unix_path);
+    result->fd = get_socket_from_dccm(unix_path);
     g_free(unix_path);
 
     if (result->fd < 0)
@@ -296,14 +306,169 @@
 
   return result;
 }
-#endif /* ENABLE_DESKTOP_INTEGRATION */
+#endif /* ENABLE_ODCCM_SUPPORT */
+
+
+#if ENABLE_HAL_SUPPORT
+
+static SynceInfo *synce_info_from_hal(const char* device_name)
+{
+  SynceInfo *result = NULL;
+  DBusGConnection *system_bus = NULL;
+  LibHalContext *hal_ctx = NULL;
+
+  GError *error = NULL;
+  DBusError dbus_error;
+
+  gint i;
+  gchar **device_list = NULL;
+  gint num_devices;
+  LibHalPropertySet *properties = NULL;
+
+  g_type_init();
+  dbus_error_init(&dbus_error);
+
+  if (!(system_bus = dbus_g_bus_get(DBUS_BUS_SYSTEM, &error))) {
+    g_critical("%s: Failed to connect to system bus: %s", G_STRFUNC, error->message);
+    goto error_exit;
+  }
+
+  if (!(hal_ctx = libhal_ctx_new())) {
+    g_critical("%s: Failed to get hal context", G_STRFUNC);
+    goto error_exit;
+  }
+
+  if (!libhal_ctx_set_dbus_connection(hal_ctx, dbus_g_connection_get_connection(system_bus))) {
+    g_critical("%s: Failed to set DBus connection for hal context", G_STRFUNC);
+    goto error_exit;
+  }
+
+  if (!libhal_ctx_init(hal_ctx, &dbus_error)) {
+    g_critical("%s: Failed to initialise hal context: %s: %s", G_STRFUNC, dbus_error.name, dbus_error.message);
+    goto error_exit;
+  }
+
+  device_list = libhal_manager_find_device_string_match(hal_ctx,
+							"usb.product",
+							"Windows Mobile Device",
+							&num_devices,
+							&dbus_error);
+  if (dbus_error_is_set(&dbus_error)) {
+    g_warning("%s: Failed to obtain list of attached devices: %s: %s", G_STRFUNC, dbus_error.name, dbus_error.message);
+    goto error_exit;
+  }
+
+  if (num_devices == 0) {
+    g_message("Hal reports no devices connected");
+    goto exit;
+  }
+
+  for (i = 0; i < num_devices; i++) {
+    const gchar *name = NULL;
+
+    properties = libhal_device_get_all_properties(hal_ctx,
+						  device_list[i],
+						  &dbus_error);
+    if (dbus_error_is_set(&dbus_error)) {
+      g_critical("%s: Failed to obtain properties for device %s: %s: %s", G_STRFUNC, device_list[i], dbus_error.name, dbus_error.message);
+      goto error_exit;
+    }
+
+    if (!(name = libhal_ps_get_string(properties, "pda.pocketpc.name"))) {
+      g_critical("%s: Failed to obtain property pda.pocketpc.name for device %s: %s: %s", G_STRFUNC, device_list[i], dbus_error.name, dbus_error.message);
+      goto error_exit;
+    }
+
+    if ( (device_name != NULL) && (strcmp(device_name, name) != 0) ) {
+      libhal_free_property_set(properties);
+      continue;
+    }
+
+    if (!(result = calloc(1, sizeof(SynceInfo)))) {
+      g_critical("%s: Failed to allocate SynceInfo", G_STRFUNC);
+      goto error_exit;
+    }
+
+    result->name = g_strdup(name);
+    result->os_version = libhal_ps_get_uint64(properties, "pda.pocketpc.os_major");
+
+    gchar *unix_path;
+
+    DBusGProxy *proxy = dbus_g_proxy_new_for_name(system_bus,
+						  "org.freedesktop.Hal",
+                                                  device_list[i],
+                                                  "org.freedesktop.Hal.Device.Synce");
+    if (proxy == NULL) {
+      g_critical("%s: Failed to get proxy for device '%s'", G_STRFUNC, device_list[i]);
+      goto error_exit;
+    }
+
+    if (!dbus_g_proxy_call(proxy, "RequestConnection", &error,
+                           G_TYPE_INVALID,
+                           G_TYPE_STRING, &unix_path,
+                           G_TYPE_INVALID))
+    {
+      g_critical("%s: Failed to get a connection for %s: %s: %s", G_STRFUNC, device_list[i], result->name, error->message);
+      g_object_unref(proxy);
+      goto error_exit;
+    }
+
+    g_object_unref(proxy);
+
+    result->fd = get_socket_from_dccm(unix_path);
+    g_free(unix_path);
+
+    if (result->fd < 0) {
+      g_critical("%s: Failed to get file-descriptor from dccm for %s", G_STRFUNC, device_list[i]);
+      goto error_exit;
+    }
+
+    result->transport = g_strdup("hal");
+
+    libhal_free_property_set(properties);
+
+    break;
+  }
+
+  goto exit;
+
+error_exit:
+  if (properties)
+    libhal_free_property_set(properties);
+  if (error != NULL)
+    g_error_free(error);
+  if (dbus_error_is_set(&dbus_error))
+    dbus_error_free(&dbus_error);
+  if (result)
+    synce_info_destroy(result);
+  result = NULL;
+
+exit:
+  if (device_list != NULL)
+    libhal_free_string_array(device_list);
+  if (hal_ctx != NULL) {
+    libhal_ctx_shutdown(hal_ctx, NULL);
+    libhal_ctx_free(hal_ctx);
+  }
+  if (system_bus != NULL)
+    dbus_g_connection_unref (system_bus);
+
+  return result;
+}
+#endif /* ENABLE_HAL_SUPPORT */
+
 
 SynceInfo* synce_info_new(const char* device_name)
 {
   SynceInfo* result = NULL;
 
-#if ENABLE_DESKTOP_INTEGRATION
-  result = synce_info_from_odccm(device_name);
+#if ENABLE_HAL_SUPPORT
+  result = synce_info_from_hal(device_name);
+#endif
+
+#if ENABLE_ODCCM_SUPPORT
+  if (!result)
+    result = synce_info_from_odccm(device_name);
 
 #if ENABLE_MIDASYNC
   if (!result)
@@ -311,8 +476,10 @@
 #endif
 #endif
 
+#if ENABLE_DCCM_FILE_SUPPORT
   if (!result)
     result = synce_info_from_file(device_name);
+#endif
 
   return result;
 }
diff -Nur libsynce-0.10.0.svn20071127.orig/lib/Makefile.am libsynce-0.10.0.svn20071127/lib/Makefile.am
--- libsynce-0.10.0.svn20071127.orig/lib/Makefile.am	2006-09-22 17:50:18.000000000 +0100
+++ libsynce-0.10.0.svn20071127/lib/Makefile.am	2008-01-02 15:19:15.000000000 +0000
@@ -1,4 +1,4 @@
-AM_CFLAGS = @DBUS_CFLAGS@
+AM_CFLAGS = @DBUS_CFLAGS@ @HAL_CFLAGS@
 
 INCLUDES = -I..
 
@@ -24,7 +24,7 @@
 	wstr.c
 
 libsynce_la_LDFLAGS = -no-undefined -version-info 0:0:0
-libsynce_la_LIBADD  = config/libconfig.la @LTLIBICONV@ @LTLIBOBJS@ @DBUS_LIBS@
+libsynce_la_LIBADD  = config/libconfig.la @LTLIBICONV@ @LTLIBOBJS@ @DBUS_LIBS@ @HAL_LIBS@
 
 include_HEADERS = \
 	synce.h synce_hash.h synce_ini.h synce_log.h synce_socket.h synce_types.h \
