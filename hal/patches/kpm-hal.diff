diff -Nur synce-kpm.orig/synceKPM/constants.py synce-kpm/synceKPM/constants.py
--- synce-kpm.orig/synceKPM/constants.py	2008-03-23 00:16:49.000000000 +0000
+++ synce-kpm/synceKPM/constants.py	2008-04-16 18:45:53.000000000 +0100
@@ -18,4 +18,9 @@
 ODCCM_DEVICE_PASSWORD_FLAG_PROVIDE           = 2
 ODCCM_DEVICE_PASSWORD_FLAG_PROVIDE_ON_DEVICE = 4
 
+SYNCE_DEVICE_PASSWORD_FLAG_UNSET             = "unset"
+SYNCE_DEVICE_PASSWORD_FLAG_PROVIDE           = "provide"
+SYNCE_DEVICE_PASSWORD_FLAG_PROVIDE_ON_DEVICE = "provide-on-device"
+SYNCE_DEVICE_PASSWORD_FLAG_CHECKING          = "checking"
+SYNCE_DEVICE_PASSWORD_FLAG_UNLOCKED          = "unlocked"
 
diff -Nur synce-kpm.orig/synceKPM/dataserver/dataserver.py synce-kpm/synceKPM/dataserver/dataserver.py
--- synce-kpm.orig/synceKPM/dataserver/dataserver.py	2008-04-15 20:03:52.000000000 +0100
+++ synce-kpm/synceKPM/dataserver/dataserver.py	2008-04-16 18:46:06.000000000 +0100
@@ -44,6 +44,7 @@
         self.deviceIsConnected = False 
 
         self.odccm_device = None
+        self.hal_device = None
         self.syncEngineRunning = False
 
 
@@ -103,6 +104,19 @@
         if removed & ODCCM_DEVICE_PASSWORD_FLAG_PROVIDE:
             pass
             self.onAuthorized()
+
+
+    def hal_password_flags_changed_cb( self, num_changes, properties ):
+        for property in properties:
+            property_name, added, removed = property
+            if property_name == "pda.pocketpc.password":
+                flag = self.hal_device.GetPropertyString("pda.pocketpc.password")
+
+                if flag == SYNCE_DEVICE_PASSWORD_FLAG_UNSET:
+                    self.onAuthorized()
+                if flag == SYNCE_DEVICE_PASSWORD_FLAG_UNLOCKED:
+                    self.onAuthorized()
+
     
     
     def odccm_device_disconnected_cb(self, obj_path ):
@@ -155,6 +169,62 @@
 
 
 
+    def hal_device_connected_cb(self, obj_path, alreadyConnected=False ):
+        deviceObject = dbus.SystemBus().get_object("org.freedesktop.Hal",obj_path)
+        device = dbus.Interface(deviceObject,"org.freedesktop.Hal.Device")
+
+        if not device.PropertyExists("pda.pocketpc.name"):
+            device = None
+            return
+        self.hal_device = device
+        self.hal_device_synce = dbus.Interface(deviceObject,"org.freedesktop.Hal.Device.Synce")
+
+        self.deviceName = self.hal_device.GetPropertyString("pda.pocketpc.name")
+        self.deviceModelName = self.hal_device.GetPropertyString("pda.pocketpc.model")
+
+        self.deviceConnected(self.deviceName,alreadyConnected)
+
+        os_major = self.hal_device.GetPropertyInteger("pda.pocketpc.os_major")
+        os_minor = self.hal_device.GetPropertyInteger("pda.pocketpc.os_minor")
+        __deviceOsVersion=[os_major,os_minor]
+        self.deviceOsVersion( __deviceOsVersion )
+
+        #Start listening to Hal for changes in the status of authorization
+        self._sm_hal_password_flags_changed = self.hal_device.connect_to_signal("PropertyModified", self.hal_password_flags_changed_cb)
+
+        #self.onConnect()
+
+        flags = self.hal_device.GetPropertyString("pda.pocketpc.password")
+        
+        if flags == synceKPM.constants.SYNCE_DEVICE_PASSWORD_FLAG_PROVIDE:
+            #This means the WM5 style
+            #self.sendMessage(ACTION_PASSWORD_NEEDED)
+            self.UnlockDeviceViaHost()
+            return 
+
+        if flags == synceKPM.constants.SYNCE_DEVICE_PASSWORD_FLAG_PROVIDE_ON_DEVICE:
+            #print "Dealing with a WM6 phone, user must unlock device on device itself"
+            self.sendMessage(ACTION_PASSWORD_NEEDED_ON_DEVICE)
+            self.UnlockDeviceViaDevice()
+            return 
+
+        #If the device is not locked at all, then we can build up rapi connections
+        #and notify all listeners. This is done by the onAuthorized method.
+        self.onAuthorized()
+
+        #pass
+
+
+    def hal_device_disconnected_cb(self, obj_path):
+        self.deviceDisconnected( self.deviceName )
+        self.hal_device = None
+        self.hal_device_synce = None
+        self.deviceName   = ""
+        self.deviceIsConnected = False
+        self._programList = []
+        pass
+
+
 
     def onAuthorized(self):
         #Only now the device is actually connected!!
@@ -162,7 +232,11 @@
         self.deviceIsConnected = True
         
         self.DeviceOwner( self.getDeviceOwner() )
-        self.DeviceModel( self.odccm_device.GetModelName() )
+
+        if self.hal_device != None:
+            self.DeviceModel( self.hal_device.GetPropertyString("pda.pocketpc.model") )
+        else:
+            self.DeviceModel( self.odccm_device.GetModelName() )
         
         self.updateDeviceInformation()
 
@@ -380,6 +454,23 @@
             print "odccm is NOT running!!"
 
 
+        # connect to Hal device manager
+
+        hal_manager = None
+        try:
+            hal_manager = dbus.Interface(dbus.SystemBus().get_object("org.freedesktop.Hal", "/org/freedesktop/Hal/Manager"), "org.freedesktop.Hal.Manager")
+            self._sm_hal_device_connected = hal_manager.connect_to_signal("DeviceAdded", self.hal_device_connected_cb)
+            self._sm_hal_device_disconnected = hal_manager.connect_to_signal("DeviceRemoved", self.hal_device_disconnected_cb)
+
+        except:
+            print "Problems connecting to Hal, is it running ?"
+
+        if hal_manager != True:
+            obj_paths = hal_manager.FindDeviceStringMatch("pda.platform", "pocketpc")
+            if len(obj_paths) > 0:
+                self.hal_device_connected_cb(obj_paths[0], True)
+
+
         try:
             self.busConn.get_object("org.synce.SyncEngine", "/org/synce/SyncEngine")
             self.handleSyncEngineStatusChange( True, True ) 
@@ -587,6 +678,10 @@
 
     @dbus.service.method('org.synce.kpm.DataServerInterface', in_signature="s")
     def processAuthorization(self, password):
+        if self.hal_device != None:
+            self.hal_device_synce.ProvidePassword( password )
+            return
+
         self.odccm_device.ProvidePassword( password )
         #authenticated = self.dev_iface.ProvidePassword(dlg.get_text())
 
